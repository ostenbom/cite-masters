"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = exports.getIds = exports.format = void 0;

var _static = require("./static");

var _output = require("../plugins/output");

var _csl = require("../plugins/input/csl");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const getIds = function getIds() {
  return this.data.map(entry => entry.id);
};

exports.getIds = getIds;

const format = function format(_format, ...options) {
  return (0, _output.format)(_format, (0, _csl.clean)(this.data), ...options);
};

exports.format = format;

const get = function get(options = {}) {
  try {
    (0, _static.validateOutputOptions)(options);
  } catch (_ref) {
    let message = _ref.message;
    logger.error('[get]', message);
  }

  const parsedOptions = Object.assign({}, this.defaultOptions, this._options.output, options);
  const type = parsedOptions.type,
        style = parsedOptions.style;

  const _style$split = style.split('-'),
        _style$split2 = _slicedToArray(_style$split, 2),
        styleType = _style$split2[0],
        styleFormat = _style$split2[1];

  const newStyle = styleType === 'citation' ? 'bibliography' : styleType === 'csl' ? 'data' : styleType;
  const newType = type === 'string' ? 'text' : type === 'json' ? 'object' : type;
  let formatOptions;

  switch (newStyle) {
    case 'bibliography':
      const lang = parsedOptions.lang,
            append = parsedOptions.append,
            prepend = parsedOptions.prepend;
      formatOptions = {
        template: styleFormat,
        lang,
        format: newType,
        append,
        prepend
      };
      break;

    case 'data':
    case 'bibtex':
    case 'bibtxt':
      formatOptions = {
        type: newType
      };
      break;

    default:
      logger.error('[get]', 'Invalid options');
      break;
  }

  const result = this.format(newStyle, formatOptions);
  const format = parsedOptions.format;

  if (format === 'real' && newType === 'html' && typeof document !== 'undefined' && typeof document.createElement === 'function') {
    const tmp = document.createElement('div');
    tmp.innerHTML = result;
    return tmp.firstChild;
  } else if (format === 'string' && typeof result === 'object') {
    return JSON.stringify(result);
  } else {
    return result;
  }
};

exports.get = get;