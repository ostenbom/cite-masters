"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _input = require("../plugins/input/");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const asyncCite = function () {
  var _ref = _asyncToGenerator(function* (data, options) {
    return new _index.default((yield data), options);
  });

  return function asyncCite(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

const async = function async(data, options, callback) {
  const promise = (0, _input.chainAsync)(data);

  if (typeof options === 'function' && !callback) {
    callback = options;
    options = undefined;
  }

  if (typeof callback === 'function') {
    promise.then(data => callback(new _index.default(data, options)));
    return undefined;
  } else {
    return asyncCite(promise, options);
  }
};

var _default = async;
exports.default = _default;