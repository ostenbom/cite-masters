"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("isomorphic-fetch");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const fetchFileAsync = function () {
  var _ref = _asyncToGenerator(function* (url, opts = {}) {
    const reqOpts = {};

    if (opts.headers) {
      reqOpts.headers = opts.headers;
      reqOpts.allowRedirectHeaders = Object.keys(opts.headers);
    }

    try {
      return fetch(url, reqOpts).then(response => response.text());
    } catch (e) {
      logger.error('[set]', `File '${url}' could not be fetched:`, e.message);
      return '[]';
    }
  });

  return function fetchFileAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = fetchFileAsync;
exports.default = _default;