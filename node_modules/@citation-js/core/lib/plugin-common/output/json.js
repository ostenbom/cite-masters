"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getJsonWrapper = void 0;

var plugins = _interopRequireWildcard(require("../../plugins/"));

var util = _interopRequireWildcard(require("../../util/"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const appendCommas = (string, index, array) => string + (index < array.length - 1 ? ',' : '');

const getJsonObject = function getJsonObject(src, dict) {
  const isArray = Array.isArray(src);
  let entries;

  if (isArray) {
    entries = src.map(entry => getJsonValue(entry, dict));
  } else {
    entries = Object.entries(src).map(([prop, value]) => `"${prop}": ${getJsonValue(value, dict)}`);
  }

  entries = entries.map(appendCommas).map(entry => dict.listItem.join(entry));
  entries = dict.list.join(entries.join(''));
  return isArray ? `[${entries}]` : `{${entries}}`;
};

const getJsonValue = function getJsonValue(src, dict) {
  if (typeof src === 'object' && src !== null) {
    if (src.length === 0) {
      return '[]';
    } else if (Object.keys(src).length === 0) {
      return '{}';
    } else {
      return getJsonObject(src, dict);
    }
  } else {
    return JSON.stringify(src) + '';
  }
};

const getJson = function getJson(src, dict) {
  let entries = src.map(entry => getJsonObject(entry, dict));
  entries = entries.map(appendCommas).map(entry => dict.entry.join(entry));
  entries = entries.join('');
  return dict.bibliographyContainer.join(`[${entries}]`);
};

const getJsonWrapper = function getJsonWrapper(src) {
  return getJson(src, plugins.dict.get('html'));
};

exports.getJsonWrapper = getJsonWrapper;
var _default = {
  data(data, {
    type,
    format = type || 'text'
  } = {}) {
    if (format === 'object') {
      return util.deepCopy(data);
    } else if (format === 'text') {
      return JSON.stringify(data, null, 2);
    } else {
      logger.warn('[get]', 'This feature (JSON output with special formatting) is unstable. See https://github.com/larsgw/citation.js/issues/144');
      return plugins.dict.has(format) ? getJson(data, plugins.dict.get(format)) : '';
    }
  }

};
exports.default = _default;