"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseAsync = exports.default = exports.parse = void 0;

var _wikidataSdk = _interopRequireDefault(require("wikidata-sdk"));

var _prop = require("./prop");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const parseWikidataJSONAsync = function () {
  var _ref = _asyncToGenerator(function* (data) {
    return Promise.all(Object.keys(data.entities).map(function () {
      var _ref2 = _asyncToGenerator(function* (entityKey) {
        const _data$entities$entity = data.entities[entityKey],
              labels = _data$entities$entity.labels,
              claims = _data$entities$entity.claims;

        const entity = _wikidataSdk.default.simplifyClaims(claims, null, null, true);

        const json = {
          _wikiId: entityKey,
          id: entityKey
        };
        yield Promise.all(Object.keys(entity).map(function () {
          var _ref3 = _asyncToGenerator(function* (prop) {
            const field = yield (0, _prop.parseAsync)(prop, entity[prop], 'en');

            if (field) {
              const _field = _slicedToArray(field, 2),
                    fieldName = _field[0],
                    fieldValue = _field[1];

              if (Array.isArray(json[fieldName])) {
                json[fieldName] = json[fieldName].concat(fieldValue);
              } else if (fieldValue !== undefined) {
                json[fieldName] = fieldValue;
              }
            }
          });

          return function (_x3) {
            return _ref3.apply(this, arguments);
          };
        }()));

        if (Array.isArray(json.author)) {
          json.author.sort(({
            _ordinal: a
          }, {
            _ordinal: b
          }) => a - b);
        }

        if (!json.title) {
          json.title = labels['en'].value;
        }

        return json;
      });

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }()));
  });

  return function parseWikidataJSONAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.parseAsync = parseWikidataJSONAsync;

const parseWikidataJSON = function parseWikidataJSON(data) {
  return Object.keys(data.entities).map(entityKey => {
    const _data$entities$entity2 = data.entities[entityKey],
          labels = _data$entities$entity2.labels,
          claims = _data$entities$entity2.claims;

    const entity = _wikidataSdk.default.simplifyClaims(claims, null, null, true);

    const json = {
      _wikiId: entityKey,
      id: entityKey
    };
    Object.keys(entity).forEach(prop => {
      const field = (0, _prop.parse)(prop, entity[prop], 'en');

      if (field) {
        const _field2 = _slicedToArray(field, 2),
              fieldName = _field2[0],
              fieldValue = _field2[1];

        if (Array.isArray(json[fieldName])) {
          json[fieldName] = json[fieldName].concat(fieldValue);
        } else if (fieldValue !== undefined) {
          json[fieldName] = fieldValue;
        }
      }
    });

    if (Array.isArray(json.author)) {
      json.author.sort(({
        _ordinal: a
      }, {
        _ordinal: b
      }) => a - b);
    }

    if (!json.title) {
      json.title = labels['en'].value;
    }

    return json;
  });
};

exports.default = exports.parse = parseWikidataJSON;