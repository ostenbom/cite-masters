"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseAsync = exports.default = exports.parse = void 0;

var _wikidataSdk = _interopRequireDefault(require("wikidata-sdk"));

var _core = require("@citation-js/core");

var _type = _interopRequireDefault(require("./type"));

var _name = require("@citation-js/name");

var _date = require("@citation-js/date");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const getSeriesOrdinal = qualifiers => qualifiers.P1545 ? parseInt(qualifiers.P1545[0]) : -1;

const getStatedAs = qualifiers => qualifiers.P1932;

const propMap = {
  P31: 'type',
  P50: 'author',
  P57: 'director',
  P86: 'composer',
  P98: 'editor',
  P110: 'illustrator',
  P123: 'publisher',
  P136: 'genre',
  P212: 'ISBN',
  P236: 'ISSN',
  P291: 'publisher-place',
  P304: 'page',
  P348: 'version',
  P356: 'DOI',
  P393: 'edition',
  P433: 'issue',
  P478: 'volume',
  P577: 'issued',
  P655: 'translator',
  P698: 'PMID',
  P932: 'PMCID',
  P953: 'URL',
  P957: 'ISBN',
  P1104: 'number-of-pages',
  P1433: 'container-title',
  P1476: 'title',
  P2093: 'author',
  P2860: false,
  P921: false,
  P3181: false,
  P364: false
};

const fetchWikidataLabel = function fetchWikidataLabel(q, lang) {
  const ids = Array.isArray(q) ? q : typeof q === 'string' ? q.split('|') : '';

  const url = _wikidataSdk.default.getEntities(ids, [lang], 'labels');

  const entities = JSON.parse(_core.util.fetchFile(url)).entities || {};
  return Object.keys(entities).map(entityKey => (entities[entityKey].labels[lang] || {}).value);
};

const parseWikidataName = ({
  value,
  qualifiers
}, lang) => {
  let statedAs = getStatedAs(qualifiers);
  let name = statedAs || fetchWikidataLabel(value, lang)[0];
  name = (0, _name.parse)(name);
  name._ordinal = getSeriesOrdinal(qualifiers);
  return name;
};

const parseWikidataProp = function parseWikidataProp(name, value, lang) {
  if (!propMap.hasOwnProperty(name)) {
    logger.info('[set]', `Unknown property: ${name}`);
    return undefined;
  } else if (propMap[name] === false) {
    return undefined;
  }

  const cslProp = propMap[name];

  if (!value) {
    return cslProp;
  }

  const cslValue = ((prop, valueList) => {
    const value = valueList[0].value;

    switch (prop) {
      case 'P31':
        const type = (0, _type.default)(value);

        if (!type) {
          logger.warn('[set]', `Wikidata entry type not recognized: ${value}. Defaulting to "book".`);
          return 'book';
        }

        return type;

      case 'P50':
      case 'P57':
      case 'P86':
      case 'P98':
      case 'P110':
      case 'P655':
        return valueList.map(name => parseWikidataName(name, lang));

      case 'P577':
        return (0, _date.parse)(value);

      case 'P123':
      case 'P136':
      case 'P291':
      case 'P1433':
        return fetchWikidataLabel(value, lang)[0];

      case 'P2093':
        return valueList.map(({
          value,
          qualifiers
        }) => {
          const name = (0, _name.parse)(value);
          name._ordinal = getSeriesOrdinal(qualifiers);
          return name;
        });

      default:
        return value;
    }
  })(name, value);

  return [cslProp, cslValue];
};

exports.default = exports.parse = parseWikidataProp;

const fetchWikidataLabelAsync = function () {
  var _ref = _asyncToGenerator(function* (q, lang) {
    const ids = Array.isArray(q) ? q : typeof q === 'string' ? q.split('|') : '';

    const url = _wikidataSdk.default.getEntities(ids, [lang], 'labels');

    const entities = JSON.parse((yield _core.util.fetchFileAsync(url))).entities || {};
    return Object.keys(entities).map(entityKey => (entities[entityKey].labels[lang] || {}).value);
  });

  return function fetchWikidataLabelAsync(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

const parseWikidataNameAsync = function () {
  var _ref2 = _asyncToGenerator(function* ({
    value,
    qualifiers
  }, lang) {
    let statedAs = getStatedAs(qualifiers);
    let name = statedAs || (yield fetchWikidataLabelAsync(value, lang))[0];
    name = (0, _name.parse)(name);
    name._ordinal = getSeriesOrdinal(qualifiers);
    return name;
  });

  return function parseWikidataNameAsync(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

const parseWikidataPropAsync = function () {
  var _ref3 = _asyncToGenerator(function* (prop, value, lang) {
    const cslValue = yield function () {
      var _ref4 = _asyncToGenerator(function* (prop, valueList) {
        const value = valueList[0].value;

        switch (prop) {
          case 'P50':
          case 'P57':
          case 'P86':
          case 'P98':
          case 'P110':
          case 'P655':
            return Promise.all(valueList.map(name => parseWikidataNameAsync(name, lang)));

          case 'P123':
          case 'P136':
          case 'P291':
          case 'P1433':
            return (yield fetchWikidataLabelAsync(value, lang))[0];
        }
      });

      return function (_x8, _x9) {
        return _ref4.apply(this, arguments);
      };
    }()(prop, value);

    if (cslValue) {
      return [parseWikidataProp(prop), cslValue];
    } else {
      return parseWikidataProp(prop, value, lang);
    }
  });

  return function parseWikidataPropAsync(_x5, _x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();

exports.parseAsync = parseWikidataPropAsync;