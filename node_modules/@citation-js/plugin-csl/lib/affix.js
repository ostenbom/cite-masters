"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWrappedEntry = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const getAffix = (source, affix) => typeof affix === 'function' ? affix(source) : typeof affix === 'string' ? affix : '';

const htmlRegex = /^([^>]+>)([\s\S]+)(<[^<]+)$/i;

const getWrappedEntry = (value, source, {
  prepend,
  append
}) => {
  const _ref = value.match(htmlRegex) || [],
        _ref2 = _slicedToArray(_ref, 4),
        _ref2$ = _ref2[1],
        start = _ref2$ === void 0 ? '' : _ref2$,
        _ref2$2 = _ref2[2],
        content = _ref2$2 === void 0 ? value : _ref2$2,
        _ref2$3 = _ref2[3],
        end = _ref2$3 === void 0 ? '' : _ref2$3;

  const prefix = getAffix(source, prepend);
  const suffix = getAffix(source, append);
  return start + prefix + content + suffix + end;
};

exports.getWrappedEntry = getWrappedEntry;